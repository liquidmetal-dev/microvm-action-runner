// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"net/http"
	"sync"

	"github.com/go-playground/webhooks/v6/github"
	"github.com/weaveworks-liquidmetal/microvm-action-runner/pkg/payload"
)

type FakePayload struct {
	ParseStub        func(*http.Request) (*github.WorkflowJobPayload, error)
	parseMutex       sync.RWMutex
	parseArgsForCall []struct {
		arg1 *http.Request
	}
	parseReturns struct {
		result1 *github.WorkflowJobPayload
		result2 error
	}
	parseReturnsOnCall map[int]struct {
		result1 *github.WorkflowJobPayload
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePayload) Parse(arg1 *http.Request) (*github.WorkflowJobPayload, error) {
	fake.parseMutex.Lock()
	ret, specificReturn := fake.parseReturnsOnCall[len(fake.parseArgsForCall)]
	fake.parseArgsForCall = append(fake.parseArgsForCall, struct {
		arg1 *http.Request
	}{arg1})
	stub := fake.ParseStub
	fakeReturns := fake.parseReturns
	fake.recordInvocation("Parse", []interface{}{arg1})
	fake.parseMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePayload) ParseCallCount() int {
	fake.parseMutex.RLock()
	defer fake.parseMutex.RUnlock()
	return len(fake.parseArgsForCall)
}

func (fake *FakePayload) ParseCalls(stub func(*http.Request) (*github.WorkflowJobPayload, error)) {
	fake.parseMutex.Lock()
	defer fake.parseMutex.Unlock()
	fake.ParseStub = stub
}

func (fake *FakePayload) ParseArgsForCall(i int) *http.Request {
	fake.parseMutex.RLock()
	defer fake.parseMutex.RUnlock()
	argsForCall := fake.parseArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePayload) ParseReturns(result1 *github.WorkflowJobPayload, result2 error) {
	fake.parseMutex.Lock()
	defer fake.parseMutex.Unlock()
	fake.ParseStub = nil
	fake.parseReturns = struct {
		result1 *github.WorkflowJobPayload
		result2 error
	}{result1, result2}
}

func (fake *FakePayload) ParseReturnsOnCall(i int, result1 *github.WorkflowJobPayload, result2 error) {
	fake.parseMutex.Lock()
	defer fake.parseMutex.Unlock()
	fake.ParseStub = nil
	if fake.parseReturnsOnCall == nil {
		fake.parseReturnsOnCall = make(map[int]struct {
			result1 *github.WorkflowJobPayload
			result2 error
		})
	}
	fake.parseReturnsOnCall[i] = struct {
		result1 *github.WorkflowJobPayload
		result2 error
	}{result1, result2}
}

func (fake *FakePayload) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.parseMutex.RLock()
	defer fake.parseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePayload) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ payload.Payload = new(FakePayload)
